<?xml version="1.0" encoding="UTF-8"?>
<definitions xmlns="http://www.omg.org/spec/BPMN/20100524/MODEL" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:activiti="http://activiti.org/bpmn" xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI" xmlns:omgdc="http://www.omg.org/spec/DD/20100524/DC" xmlns:omgdi="http://www.omg.org/spec/DD/20100524/DI" typeLanguage="http://www.w3.org/2001/XMLSchema" expressionLanguage="http://www.w3.org/1999/XPath" targetNamespace="http://www.activiti.org/test/other">
  <process id="MAGNA_CSBG" name="前端软件_参数变更申请流程" isExecutable="true" activiti:candidateStarterUsers="svc.mtt,ming.xu,maorong.wu,info.mtt" activiti:candidateStarterGroups="CSBG">
    <documentation>{
"description": "前端软件_参数变更申请流程",
"businessKey": "${YYYY-MM-DD} 前端软件_参数变更申请 ${user.name}"
}</documentation>
    <startEvent id="startevent1" name="Start" activiti:initiator="initiator" activiti:formKey="1599706063671">
      <extensionElements>
        <activiti:executionListener event="start" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
          <activiti:field name="language">
            <activiti:string><![CDATA[groovy]]></activiti:string>
          </activiti:field>
          <activiti:field name="script">
            <activiti:string><![CDATA[//初始化审批历史
				import groovy.json.JsonOutput;
				def public_allApproveHi = [];
				execution.setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));
				execution.setVariable("public_procinstid",execution.getProcessInstanceId());
				execution.setVariable("public_applyFor",new Date().getTime()+"");//填表日期,申请日期
				execution.setVariable("public_businessKey",execution.getBusinessKey());
				execution.setVariable("public_approvalRuleSeq", "0");//初始化审批规则序列
				execution.setVariable("public_seqFinish","N");//初始化审批规则是否遍历完
				execution.setVariable("public_coreaction","同意");
				execution.setVariable("procinstid",execution.getProcessInstanceId());

				execution.setVariable("businessKey",execution.getBusinessKey());				
				]]></activiti:string>
          </activiti:field>
        </activiti:executionListener>
        <activiti:executionListener event="end" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
          <activiti:field name="language">
            <activiti:string><![CDATA[groovy]]></activiti:string>
          </activiti:field>
          <activiti:field name="script">
            <activiti:string><![CDATA[
				//初始化审批历史
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;		
				import com.eorionsolution.bpms.extension.rest.RestAPI;
				
				//查询申请人信息
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+initiator+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);				
				def body = result._http_response_body;
				def initiatorInfo = new JsonSlurper().parseText(body);
				if(initiatorInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到申请人信息");
					
				//保存申请人信息
				execution.setVariable("public_isCostcenterPrincipal",initiatorInfo[0].IS_COSTCENTER_PRINCIPAL_.toString());	//是否经理 N/Y
				execution.setVariable("public_mail",initiatorInfo[0].MAIL_.toString());										//邮箱
				execution.setVariable("public_managerCode",initiatorInfo[0].MANAGER_CODE_.toString());						//经理
				execution.setVariable("public_department",initiatorInfo[0].DEPARTMENT_.toString());							//部门
				execution.setVariable("public_initiatorName",initiatorInfo[0].EMPLOYEE_NAME_.toString());					//姓名（提单人）
				execution.setVariable("initiatorWechatId",initiatorInfo[0].WECHAT_CODE_.toString());						//提单人微信id

				execution.setVariable("public_createTime",new Date().format("YYYY-MM-dd HH:mm:ss"));					    //提单时间
				
				
				def public_allApproveHi = [];
				
				//设置执行任务历史
				def approvehi = [:];
				approvehi.assigneeName = initiatorInfo[0].EMPLOYEE_NAME_.toString();
				approvehi.taskName = "启动";
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = "";
				public_allApproveHi << approvehi
				execution.setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));		



				
				]]></activiti:string>
          </activiti:field>
        </activiti:executionListener>		
      </extensionElements>
    </startEvent>
    <scriptTask id="ST01" name="任务执行规则计算" scriptFormat="groovy" activiti:autoStoreVariables="false">
 	<script><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;		
				import com.eorionsolution.bpms.extension.rest.RestAPI;				

				def public_needBack = "N";//当回退时第一条回退条件不满足，则继续回退，此处默认不需要继续回退
				//计算审批规则
				try{
					def approvalRules = new JsonSlurper().parseText(public_approvalRule);
					
					def now_public_approvalRuleSeq = public_approvalRuleSeq.toInteger();
					if(public_coreaction == "返回至上一节点"){
						now_public_approvalRuleSeq = public_approvalRuleSeq.toInteger()-2;//由于后续节点判断序列号加了1，所以回退时要减2
						if(now_public_approvalRuleSeq < 0 ){
							now_public_approvalRuleSeq = 0
						}
					}
					execution.setVariable("public_approvalRuleSeq",now_public_approvalRuleSeq+"");//重置审批序列
					
					
					if(approvalRules[now_public_approvalRuleSeq] == null){//如果遍历结束
						execution.setVariable("public_seqFinish","Y");//审批规则遍历结束
						execution.setVariable("public_gt01","无");//审批规则遍历结束
					}else{
						def approvalRule = approvalRules[now_public_approvalRuleSeq];
						
						execution.setVariable("public_formKey",approvalRule.formKey._id);
						execution.setVariable("public_taskName",approvalRule.taskName);
						execution.setVariable("public_approver",JsonOutput.toJson(approvalRule.approver));
						
						def public_approverList = [];
						approvalRule.approver.each{
							elem ->
							if(elem.CODE == "manager"){
								public_approverList << public_managerCode;
							}
							else if(elem.CODE == "submitter"){
        						public_approverList << initiator;
       						}
							else{
								public_approverList << elem.CODE;
							}
							
						}
						
						execution.setVariable("public_approverList",public_approverList);
						
						if(approvalRule.isCountSign == "是"){
							execution.setVariable("public_nrOfCompletedInstances",1);
							execution.setVariable("public_nrOfInstances",1);
						}
						else{
							execution.setVariable("public_nrOfCompletedInstances",1);
							execution.setVariable("public_nrOfInstances",100);
						}
						
						
						
						
						if(approvalRule.condition == "all"){//all规则，必须执行
							if(approvalRule.isSequential == "false"){
								execution.setVariable("public_gt01","并");
							}else{
								execution.setVariable("public_gt01","串");
							}						
						}else{//自定义规则
							try{
								Binding b = new Binding();
								b.setVariable("productLine", productLine);//赋值产品线，今后根据流程要动态调整
								GroovyShell sh = new GroovyShell(b);
								def ex = approvalRule.condition;
								def shellResult =  sh.evaluate (ex) ;
								if(shellResult){//满足条件
									if(approvalRule.isSequential == "false"){
										execution.setVariable("public_gt01","并");
									}else{
										execution.setVariable("public_gt01","串");
									}
								}else{
									execution.setVariable("public_gt01","无");//审批规则遍历结束
									public_needBack = "Y"
								}
							}catch(Exception e){
								throw new org.activiti.engine.ActivitiIllegalArgumentException("请检查审批规则"+e);
							}						
						}
					}
					
				}catch(Exception e){
					throw new org.activiti.engine.ActivitiIllegalArgumentException("请设置审批规则"+e);
				}
				
				
				execution.setVariable("public_needBack",public_needBack);
				//初始化审批
				if(public_coreaction == "返回至上一节点" && public_needBack == "Y"){
					execution.setVariable("public_coreaction","返回至上一节点");
				}
				else{
					execution.setVariable("public_coreaction","同意");
				}
				
				execution.setVariable("corecomments","");
				execution.setVariable("coreaction","");
				execution.setVariable("co","");
				execution.setVariable("coMulti","");	
				
				
				]]></script>
    </scriptTask>
    <sequenceFlow id="flow11" name="串" sourceRef="exclusivegateway2" targetRef="subprocess1">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_gt01") == "串"}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow19" name="并" sourceRef="exclusivegateway2" targetRef="subprocess2">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_gt01") == "并"}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow22" name="无" sourceRef="exclusivegateway2" targetRef="ST02">
      <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_gt01") == "无"}]]></conditionExpression>
    </sequenceFlow>
    <sequenceFlow id="flow1" sourceRef="startevent1" targetRef="ST01"></sequenceFlow>
    <subProcess id="subprocess2" name="并行审批">
      <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="public_approverList" activiti:elementVariable="assignee">
        <completionCondition><![CDATA[${nrOfCompletedInstances/nrOfInstances >= public_nrOfCompletedInstances/public_nrOfInstances || execution.getVariable("public_coreaction") != "同意"}]]></completionCondition>
      </multiInstanceLoopCharacteristics>
      <startEvent id="startevent3" name="Start"></startEvent>
      <userTask id="UT04" name="并发任务" activiti:assignee="${assignee}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;		
				import com.eorionsolution.bpms.extension.rest.RestAPI;				
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");
				
				//查询审批人职位和审批人姓名并且重置task name
				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+assignee+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				//重置task name，保存审批人姓名
				task.setName(public_taskName);
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);					

				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);

				
				]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;

				
				if(task.getExecution().getVariableLocal("coreaction") != "加签审核" && task.getExecution().getVariableLocal("coreaction") != "加签审阅"){
					//无加签时设置总审批意见
					task.getExecution().setVariable("public_coreaction",task.getExecution().getVariableLocal("coreaction"));
					if(task.getExecution().getVariableLocal("coreaction") == ""){
						task.getExecution().setVariable("public_coreaction","同意");
					}
				}else{
					if(task.getExecution().getVariableLocal("coreaction") == "加签审核"){
						def coid = new JsonSlurper().parseText(task.getExecution().getVariableLocal("co")).CODE;
						task.getExecution().setVariableLocal("coid",coid);				
					}
					else if(task.getExecution().getVariableLocal("coreaction") == "加签审阅"){
						//设置加签审阅人
						def coidList = [];
						new JsonSlurper().parseText(task.getExecution().getVariableLocal("coMulti")).each{it->
							coidList << it.CODE;
						};						
						task.getExecution().setVariableLocal("coidList",coidList);
					}
					task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));		
				}
				
						
				
				
				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));				
				
				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));
				
				]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
      </userTask>
      <sequenceFlow id="flow13" name="审阅加签" sourceRef="exclusivegateway3" targetRef="UT06">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") == "加签审阅" }]]></conditionExpression>
	  </sequenceFlow>
      <sequenceFlow id="flow14" name="审核加签" sourceRef="exclusivegateway3" targetRef="UT05">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") == "加签审核" }]]></conditionExpression>
	  </sequenceFlow>
      <sequenceFlow id="flow18" name="无加签" sourceRef="exclusivegateway3" targetRef="endevent2">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") != "加签审核" && execution.getVariable("coreaction") != "加签审阅"}]]></conditionExpression>
	  </sequenceFlow>
      <exclusiveGateway id="exclusivegateway3" name="Exclusive Gateway"></exclusiveGateway>
      <sequenceFlow id="flow12" sourceRef="UT04" targetRef="exclusivegateway3"></sequenceFlow>
      <userTask id="UT06" name="审阅加签" activiti:assignee="${coid}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;
				import com.eorionsolution.bpms.extension.rest.RestAPI;				  
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");

				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+coid+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				
				
				//重置task name，保存审批人姓名
				task.setName(public_taskName +"(加签审阅) ");
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);

				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;			  
				if(task.getExecution().getVariable("coreaction") == "加签审核" || task.getExecution().getVariable("coreaction") == "加签审阅" ){
					throw new org.activiti.engine.ActivitiIllegalArgumentException("加签任务暂不支持再次加签，请勿选择加签审核或加签审阅");
				}
				task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));				

				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));
				
				task.getExecution().setVariable("public_formKey",public_formKey.toString());				
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
        <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="coidList" activiti:elementVariable="coid">
          <completionCondition>${nrOfCompletedInstances/nrOfInstances == 1 }</completionCondition>
        </multiInstanceLoopCharacteristics>
      </userTask>



      <userTask id="UT05" name="审核加签" activiti:assignee="${coid}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
 
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;
				import com.eorionsolution.bpms.extension.rest.RestAPI;				  
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");

				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+coid+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				
				
				//重置task name，保存审批人姓名
				task.setName(public_taskName +"(加签审核) ");
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);		


				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);	

				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;			  
				if(task.getExecution().getVariable("coreaction") == "加签审核" || task.getExecution().getVariable("coreaction") == "加签审阅" ){
					throw new org.activiti.engine.ActivitiIllegalArgumentException("加签任务暂不支持再次加签，请勿选择加签审核或加签审阅");
				}
				task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));				

				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));		

				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
      </userTask>
	  
	  
      <endEvent id="endevent2" name="End"></endEvent>
      <sequenceFlow id="flow15" sourceRef="UT05" targetRef="endevent2"></sequenceFlow>
      <sequenceFlow id="flow16" sourceRef="startevent3" targetRef="UT04"></sequenceFlow>
      <sequenceFlow id="flow29" sourceRef="UT06" targetRef="UT04"></sequenceFlow>
    </subProcess>
    <subProcess id="subprocess1" name="串行审批">
      <multiInstanceLoopCharacteristics isSequential="true" activiti:collection="public_approverList" activiti:elementVariable="assignee">
        <completionCondition><![CDATA[${nrOfCompletedInstances/nrOfInstances >= public_nrOfCompletedInstances/public_nrOfInstances || execution.getVariable("public_coreaction") != "同意"}]]></completionCondition>
      </multiInstanceLoopCharacteristics>
      <startEvent id="startevent2" name="Start"></startEvent>
      <userTask id="UT01" name="串行任务" activiti:assignee="${assignee}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;		
				import com.eorionsolution.bpms.extension.rest.RestAPI;				
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");
				
				//查询审批人职位和审批人姓名并且重置task name
				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+assignee+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				
				
				//重置task name，保存审批人姓名
				task.setName(public_taskName);
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);

				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);				
				
				]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;

				
				if(task.getExecution().getVariableLocal("coreaction") != "加签审核" && task.getExecution().getVariableLocal("coreaction") != "加签审阅"){
					//无加签时设置总审批意见
					task.getExecution().setVariable("public_coreaction",task.getExecution().getVariableLocal("coreaction"));
					if(task.getExecution().getVariableLocal("coreaction") == ""){
						task.getExecution().setVariable("public_coreaction","同意");
					}
				}else{
					if(task.getExecution().getVariableLocal("coreaction") == "加签审核"){
						def coid = new JsonSlurper().parseText(task.getExecution().getVariableLocal("co")).CODE;
						task.getExecution().setVariableLocal("coid",coid);				
					}
					else if(task.getExecution().getVariableLocal("coreaction") == "加签审阅"){
						//设置加签审阅人
						def coidList = [];
						new JsonSlurper().parseText(task.getExecution().getVariableLocal("coMulti")).each{it->
							coidList << it.CODE;
						};						
						task.getExecution().setVariableLocal("coidList",coidList);
					}
					task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));		
				}
				
						
				
				
				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));				
				
				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));				
				]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
      </userTask>
      <sequenceFlow id="flow5" name="审阅加签" sourceRef="exclusivegateway1" targetRef="UT02">
        <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") == "加签审阅" }]]></conditionExpression>
      </sequenceFlow>
      <sequenceFlow id="flow6" name="审核加签" sourceRef="exclusivegateway1" targetRef="UT03">
        <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") == "加签审核" }]]></conditionExpression>
      </sequenceFlow>
      <sequenceFlow id="flow9" name="无加签" sourceRef="exclusivegateway1" targetRef="endevent1">
        <conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("coreaction") != "加签审核" && execution.getVariable("coreaction") != "加签审阅"}]]></conditionExpression>
      </sequenceFlow>
      <userTask id="UT02" name="审阅加签" activiti:assignee="${coid}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;
				import com.eorionsolution.bpms.extension.rest.RestAPI;				  
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");

				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+coid+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				
				
				//重置task name，保存审批人姓名
				task.setName(public_taskName +"(加签审阅) ");
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);	

				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);					
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;			  
				if(task.getExecution().getVariable("coreaction") == "加签审核" || task.getExecution().getVariable("coreaction") == "加签审阅" ){
					throw new org.activiti.engine.ActivitiIllegalArgumentException("加签任务暂不支持再次加签，请勿选择加签审核或加签审阅");
				}
				task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));				

				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));
				
				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
        <multiInstanceLoopCharacteristics isSequential="false" activiti:collection="coidList" activiti:elementVariable="coid">
          <completionCondition>${nrOfCompletedInstances/nrOfInstances == 1 }</completionCondition>
        </multiInstanceLoopCharacteristics>
      </userTask>
      <userTask id="UT03" name="审核加签" activiti:assignee="${coid}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="${public_formKey}">
        <extensionElements>
 
          <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;
				import com.eorionsolution.bpms.extension.rest.RestAPI;				  
				//放置local变量，为了不影响并发的审批意见
				task.getExecution().setVariableLocal("corecomments","");
				task.getExecution().setVariableLocal("coreaction","");
				task.getExecution().setVariableLocal("co","");
				task.getExecution().setVariableLocal("coMulti","");

				
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+coid+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到加签人职位信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//审批人姓名
				def assigneePosition = assigneeInfo[0].POSITION_.toString();	//审批人职位
				def mail = assigneeInfo[0].MAIL_.toString();					//审批人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id

				
				
				//重置task name，保存审批人姓名
				task.setName(public_taskName +"(加签审核) ");
				task.getExecution().setVariableLocal("assigneeName",assigneeName);
				task.getExecution().setVariableLocal("assigneePosition",assigneePosition);	

				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '请您审批');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);	

				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;			  

				if(task.getExecution().getVariable("coreaction") == "加签审核" || task.getExecution().getVariable("coreaction") == "加签审阅" ){
					throw new org.activiti.engine.ActivitiIllegalArgumentException("加签任务暂不支持再次加签，请勿选择加签审核或加签审阅");
				}
				task.getExecution().setVariable("public_coreaction",task.getExecution().getVariable("coreaction"));				

				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = task.getExecution().getVariable("assigneeName");
				approvehi.taskName = task.getName();
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = task.getExecution().getVariableLocal("coreaction") + task.getExecution().getVariableLocal("corecomments");

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));	


				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));				
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>
        </extensionElements>
      </userTask>
      <sequenceFlow id="flow3" sourceRef="startevent2" targetRef="UT01"></sequenceFlow>
      <exclusiveGateway id="exclusivegateway1" name="Exclusive Gateway"></exclusiveGateway>
      <sequenceFlow id="flow4" sourceRef="UT01" targetRef="exclusivegateway1"></sequenceFlow>
      <endEvent id="endevent1" name="End"></endEvent>
      <sequenceFlow id="flow7" sourceRef="UT03" targetRef="endevent1"></sequenceFlow>
      <sequenceFlow id="flow8" sourceRef="UT02" targetRef="UT01"></sequenceFlow>
    </subProcess>
    <exclusiveGateway id="exclusivegateway2" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow10" sourceRef="ST01" targetRef="exclusivegateway2"></sequenceFlow>
    <sequenceFlow id="flow20" sourceRef="subprocess1" targetRef="ST02"></sequenceFlow>
    <sequenceFlow id="flow21" sourceRef="subprocess2" targetRef="ST02"></sequenceFlow>
    <scriptTask id="ST02" name="后续节点判断" scriptFormat="groovy" activiti:autoStoreVariables="false">
 	<script><![CDATA[
				import groovy.json.JsonSlurper;
				execution.setVariable("public_approvalRuleSeq", public_approvalRuleSeq.toInteger()+1+"");//审批规则序列+1
				
				]]></script>
    </scriptTask>
    <exclusiveGateway id="exclusivegateway4" name="Exclusive Gateway"></exclusiveGateway>
    <sequenceFlow id="flow23" sourceRef="ST02" targetRef="exclusivegateway4"></sequenceFlow>

    <userTask id="UT07" name="驳回修改" activiti:assignee="${initiator}" activiti:dueDate="P1D" activiti:priority="60" activiti:formKey="1599706063671">
        <extensionElements>
  
	    <activiti:taskListener event="create" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;				
				import com.eorionsolution.bpms.extension.rest.RestAPI;
				
				//查询收件人
				Map<String, Object> restParam = new java.util.HashMap<String,Object>();
                def headerMap = new java.util.HashMap<String,String>(); 			
				restParam.put("_http_method","GET");
				restParam.put("_http_headers",headerMap);
				restParam.put("_http_body","");	
				def param=java.net.URLEncoder.encode('[{"type":"category","target":["variable",["template-tag","sn"]],"value":"'+initiator+'"}]', "UTF-8");
				restParam.put("_http_url", 'http://127.0.0.1:3000/public/question/5586c703-b53b-4e4a-98b6-3598604673dd.json?parameters='+param);
				def result = RestAPI.execute(restParam);				
				def body = result._http_response_body;
				def assigneeInfo = new JsonSlurper().parseText(body);
				if(assigneeInfo.size() == 0)
					throw new org.activiti.engine.ActivitiIllegalArgumentException("未找到执行人信息，请联系管理员");
					
				def assigneeName = assigneeInfo[0].EMPLOYEE_NAME_.toString();	//执行人姓名
				def mail = assigneeInfo[0].MAIL_.toString();					//执行人邮箱
				def wechatId = assigneeInfo[0].WECHAT_CODE_.toString();			//微信id
				
				
				
				
				task.getExecution().setVariable("public_approvalRuleSeq", "0");//初始化审批规则序列
				task.getExecution().setVariable("public_formKey",public_formKey.toString());
				def newForm = new JsonSlurper().parseText(task.getExecution().getVariable(public_formKey.toString()));
				newForm.data = [];
				task.getExecution().setVariable(public_formKey.toString(),JsonOutput.toJson(newForm));

				
				//微信通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', wechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '驳回修改');
				wxBodyMap.put('url','https://mttbpms.magna.cn/task.html?processInstanceId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				task.getExecution().setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);					
				
				]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>	

          <activiti:taskListener event="complete" class="org.activiti.engine.impl.bpmn.listener.ScriptTaskListener">
            <activiti:field name="language">
              <activiti:string><![CDATA[groovy]]></activiti:string>
            </activiti:field>
            <activiti:field name="script">
              <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;			  

				//设置审批历史
				def approvehi = [:];
				approvehi.assigneeName = public_initiatorName;
				approvehi.taskName = "修改";
				approvehi.approveTime = new Date().format("YYYY-MM-dd HH:mm:ss");
				approvehi.approveMemo = "";

				def public_allApproveHi = new JsonSlurper().parseText(task.getExecution().getVariable("public_allApproveHi"));
				public_allApproveHi << approvehi;
				task.getExecution().setVariable("public_allApproveHi",JsonOutput.toJson(public_allApproveHi));	
			
			  ]]></activiti:string>
            </activiti:field>
          </activiti:taskListener>		
		
        </extensionElements>
    </userTask>
    <sequenceFlow id="flow24" name="继续执行下一节点任务" sourceRef="exclusivegateway4" targetRef="ST01">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${(execution.getVariable("public_seqFinish") == "N" && execution.getVariable("public_coreaction") == "同意") || execution.getVariable("public_coreaction") == "返回至上一节点" }]]></conditionExpression>	
	</sequenceFlow>	
    <sequenceFlow id="flow25" name="驳回修改" sourceRef="exclusivegateway4" targetRef="UT07">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_coreaction") == "驳回修改" }]]></conditionExpression>		
	</sequenceFlow>
	<sequenceFlow id="flow27" name="彻底拒绝" sourceRef="exclusivegateway4" targetRef="endevent3">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_coreaction") == "彻底拒绝"}]]></conditionExpression>		
	</sequenceFlow>
	<sequenceFlow id="flow28" name="正常结束" sourceRef="exclusivegateway4" targetRef="ES">
		<conditionExpression xsi:type="tFormalExpression"><![CDATA[${execution.getVariable("public_seqFinish") == "Y" && execution.getVariable("public_coreaction") == "同意"}]]></conditionExpression>		
	</sequenceFlow>
    <sequenceFlow id="flow26" sourceRef="UT07" targetRef="ST01"></sequenceFlow>
    <endEvent id="endevent3" name="EN">
      <extensionElements>
        <activiti:executionListener event="end" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
          <activiti:field name="language">
            <activiti:string><![CDATA[groovy]]></activiti:string>
          </activiti:field>
          <activiti:field name="script">
            <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;				
				import com.eorionsolution.bpms.extension.rest.RestAPI;
	

	
				//通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', initiatorWechatId);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '单据被彻底拒绝');
				wxBodyMap.put('url','');
				def wxBody = JsonOutput.toJson(wxBodyMap);

				execution.setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);			
			
			]]></activiti:string>
          </activiti:field>
        </activiti:executionListener>
      </extensionElements>		
	</endEvent>
    
    <endEvent id="ES" name="End">
      <extensionElements>
        <activiti:executionListener event="end" class="org.activiti.engine.impl.bpmn.listener.ScriptExecutionListener">
          <activiti:field name="language">
            <activiti:string><![CDATA[groovy]]></activiti:string>
          </activiti:field>
          <activiti:field name="script">
            <activiti:string><![CDATA[
				import groovy.json.JsonSlurper;
				import groovy.json.JsonOutput;				
				import com.eorionsolution.bpms.extension.rest.RestAPI;
				def publicInvolvedUsersList = new JsonSlurper().parseText(execution.getVariable("public_involvedUsers"));
				def weachtString = "";
				publicInvolvedUsersList.each{
					elem->
					weachtString = weachtString + "|" + elem.WECHAT;
				}
				
				//通知用户有任务执行
				def wxRestParam = new HashMap<String,Object>()
				def wxHeaderMap = new HashMap<String,String>()

				def wxBodyMap = new HashMap()
				
				wxBodyMap.put('touser', initiatorWechatId + "|" +weachtString);
				wxBodyMap.put('agentid',1000022);
				wxBodyMap.put('title', businessKey);
				wxBodyMap.put('description', '审批已经通过，请使用电脑端火狐或谷歌浏览器打开如下链接<div></div>https://mttbpms.magna.cn/formprint/print.html?processId='+procinstid);
				wxBodyMap.put('url','https://mttbpms.magna.cn/formprint/print.html?processId=' + procinstid);
				def wxBody = JsonOutput.toJson(wxBodyMap);

				execution.setVariable("wxBody",JsonOutput.toJson(wxBodyMap));
				wxHeaderMap.put("Content-Type","application/json");
				wxRestParam.put("_http_method","POST");
				wxRestParam.put("_http_headers",wxHeaderMap);
				wxRestParam.put("_http_url", 'http://127.0.0.1:8281/wechat/message/send');
				wxRestParam.put("_http_body", wxBody);
				def wxResult = RestAPI.execute(wxRestParam);			
			
			]]></activiti:string>
          </activiti:field>
        </activiti:executionListener>
      </extensionElements>			
	</endEvent>
    
  </process>
  <bpmndi:BPMNDiagram id="BPMNDiagram_MAGNA_LSGY">
    <bpmndi:BPMNPlane bpmnElement="MAGNA_LSGY" id="BPMNPlane_MAGNA_LSGY">
      <bpmndi:BPMNShape bpmnElement="startevent1" id="BPMNShape_startevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="550.0" y="56.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="ST01" id="BPMNShape_ST01">
        <omgdc:Bounds height="71.0" width="105.0" x="515.0" y="130.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="subprocess2" id="BPMNShape_subprocess2">
        <omgdc:Bounds height="364.0" width="461.0" x="599.0" y="326.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent3" id="BPMNShape_startevent3">
        <omgdc:Bounds height="35.0" width="35.0" x="684.0" y="356.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT04" id="BPMNShape_UT04">
        <omgdc:Bounds height="55.0" width="105.0" x="649.0" y="426.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway3" id="BPMNShape_exclusivegateway3">
        <omgdc:Bounds height="40.0" width="40.0" x="799.0" y="434.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT06" id="BPMNShape_UT06">
        <omgdc:Bounds height="55.0" width="105.0" x="920.0" y="427.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT05" id="BPMNShape_UT05">
        <omgdc:Bounds height="55.0" width="105.0" x="767.0" y="511.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent2" id="BPMNShape_endevent2">
        <omgdc:Bounds height="35.0" width="35.0" x="802.0" y="626.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="subprocess1" id="BPMNShape_subprocess1">
        <omgdc:Bounds height="364.0" width="461.0" x="70.0" y="322.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="startevent2" id="BPMNShape_startevent2">
        <omgdc:Bounds height="35.0" width="35.0" x="160.0" y="365.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT01" id="BPMNShape_UT01">
        <omgdc:Bounds height="55.0" width="105.0" x="125.0" y="445.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT02" id="BPMNShape_UT02">
        <omgdc:Bounds height="55.0" width="105.0" x="410.0" y="445.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT03" id="BPMNShape_UT03">
        <omgdc:Bounds height="55.0" width="105.0" x="243.0" y="524.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway1" id="BPMNShape_exclusivegateway1">
        <omgdc:Bounds height="40.0" width="40.0" x="275.0" y="453.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent1" id="BPMNShape_endevent1">
        <omgdc:Bounds height="35.0" width="35.0" x="278.0" y="615.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway2" id="BPMNShape_exclusivegateway2">
        <omgdc:Bounds height="40.0" width="40.0" x="547.0" y="238.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="ST02" id="BPMNShape_ST02">
        <omgdc:Bounds height="55.0" width="105.0" x="515.0" y="780.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="exclusivegateway4" id="BPMNShape_exclusivegateway4">
        <omgdc:Bounds height="40.0" width="40.0" x="547.0" y="900.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="UT07" id="BPMNShape_UT07">
        <omgdc:Bounds height="55.0" width="105.0" x="270.0" y="893.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="endevent3" id="BPMNShape_endevent3">
        <omgdc:Bounds height="35.0" width="35.0" x="445.0" y="1030.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNShape bpmnElement="ES" id="BPMNShape_ES">
        <omgdc:Bounds height="35.0" width="35.0" x="655.0" y="1030.0"></omgdc:Bounds>
      </bpmndi:BPMNShape>
      <bpmndi:BPMNEdge bpmnElement="flow11" id="BPMNEdge_flow11">
        <omgdi:waypoint x="547.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="299.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="300.0" y="322.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="12.0" x="406.0" y="238.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow19" id="BPMNEdge_flow19">
        <omgdi:waypoint x="587.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="830.0" y="258.0"></omgdi:waypoint>
        <omgdi:waypoint x="829.0" y="326.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="12.0" x="679.0" y="238.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow22" id="BPMNEdge_flow22">
        <omgdi:waypoint x="567.0" y="278.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="780.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="12.0" x="567.0" y="299.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow1" id="BPMNEdge_flow1">
        <omgdi:waypoint x="567.0" y="91.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="130.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow13" id="BPMNEdge_flow13">
        <omgdi:waypoint x="839.0" y="454.0"></omgdi:waypoint>
        <omgdi:waypoint x="920.0" y="454.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="850.0" y="419.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow14" id="BPMNEdge_flow14">
        <omgdi:waypoint x="819.0" y="474.0"></omgdi:waypoint>
        <omgdi:waypoint x="819.0" y="511.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="750.0" y="487.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow18" id="BPMNEdge_flow18">
        <omgdi:waypoint x="839.0" y="454.0"></omgdi:waypoint>
        <omgdi:waypoint x="897.0" y="454.0"></omgdi:waypoint>
        <omgdi:waypoint x="897.0" y="643.0"></omgdi:waypoint>
        <omgdi:waypoint x="837.0" y="643.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="36.0" x="900.0" y="561.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow12" id="BPMNEdge_flow12">
        <omgdi:waypoint x="754.0" y="453.0"></omgdi:waypoint>
        <omgdi:waypoint x="799.0" y="454.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow15" id="BPMNEdge_flow15">
        <omgdi:waypoint x="819.0" y="566.0"></omgdi:waypoint>
        <omgdi:waypoint x="819.0" y="626.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow16" id="BPMNEdge_flow16">
        <omgdi:waypoint x="701.0" y="391.0"></omgdi:waypoint>
        <omgdi:waypoint x="701.0" y="426.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow29" id="BPMNEdge_flow29">
        <omgdi:waypoint x="972.0" y="427.0"></omgdi:waypoint>
        <omgdi:waypoint x="971.0" y="402.0"></omgdi:waypoint>
        <omgdi:waypoint x="700.0" y="402.0"></omgdi:waypoint>
        <omgdi:waypoint x="701.0" y="426.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow5" id="BPMNEdge_flow5">
        <omgdi:waypoint x="315.0" y="473.0"></omgdi:waypoint>
        <omgdi:waypoint x="410.0" y="472.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="345.0" y="433.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow6" id="BPMNEdge_flow6">
        <omgdi:waypoint x="295.0" y="493.0"></omgdi:waypoint>
        <omgdi:waypoint x="295.0" y="524.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="240.0" y="501.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow9" id="BPMNEdge_flow9">
        <omgdi:waypoint x="315.0" y="473.0"></omgdi:waypoint>
        <omgdi:waypoint x="385.0" y="473.0"></omgdi:waypoint>
        <omgdi:waypoint x="385.0" y="632.0"></omgdi:waypoint>
        <omgdi:waypoint x="313.0" y="632.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="36.0" x="420.0" y="558.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow3" id="BPMNEdge_flow3">
        <omgdi:waypoint x="177.0" y="400.0"></omgdi:waypoint>
        <omgdi:waypoint x="177.0" y="445.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow4" id="BPMNEdge_flow4">
        <omgdi:waypoint x="230.0" y="472.0"></omgdi:waypoint>
        <omgdi:waypoint x="275.0" y="473.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow7" id="BPMNEdge_flow7">
        <omgdi:waypoint x="295.0" y="579.0"></omgdi:waypoint>
        <omgdi:waypoint x="295.0" y="615.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow8" id="BPMNEdge_flow8">
        <omgdi:waypoint x="462.0" y="445.0"></omgdi:waypoint>
        <omgdi:waypoint x="461.0" y="417.0"></omgdi:waypoint>
        <omgdi:waypoint x="178.0" y="417.0"></omgdi:waypoint>
        <omgdi:waypoint x="177.0" y="445.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow10" id="BPMNEdge_flow10">
        <omgdi:waypoint x="567.0" y="201.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="238.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow20" id="BPMNEdge_flow20">
        <omgdi:waypoint x="300.0" y="686.0"></omgdi:waypoint>
        <omgdi:waypoint x="299.0" y="757.0"></omgdi:waypoint>
        <omgdi:waypoint x="566.0" y="757.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="780.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow21" id="BPMNEdge_flow21">
        <omgdi:waypoint x="829.0" y="690.0"></omgdi:waypoint>
        <omgdi:waypoint x="830.0" y="758.0"></omgdi:waypoint>
        <omgdi:waypoint x="568.0" y="758.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="780.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow23" id="BPMNEdge_flow23">
        <omgdi:waypoint x="567.0" y="835.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="900.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow24" id="BPMNEdge_flow24">
        <omgdi:waypoint x="587.0" y="920.0"></omgdi:waypoint>
        <omgdi:waypoint x="1138.0" y="919.0"></omgdi:waypoint>
        <omgdi:waypoint x="1138.0" y="165.0"></omgdi:waypoint>
        <omgdi:waypoint x="620.0" y="165.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="42.0" width="100.0" x="859.0" y="881.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow25" id="BPMNEdge_flow25">
        <omgdi:waypoint x="547.0" y="920.0"></omgdi:waypoint>
        <omgdi:waypoint x="375.0" y="920.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="432.0" y="894.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow26" id="BPMNEdge_flow26">
        <omgdi:waypoint x="270.0" y="920.0"></omgdi:waypoint>
        <omgdi:waypoint x="10.0" y="920.0"></omgdi:waypoint>
        <omgdi:waypoint x="10.0" y="165.0"></omgdi:waypoint>
        <omgdi:waypoint x="515.0" y="165.0"></omgdi:waypoint>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow27" id="BPMNEdge_flow27">
        <omgdi:waypoint x="567.0" y="940.0"></omgdi:waypoint>
        <omgdi:waypoint x="566.0" y="1047.0"></omgdi:waypoint>
        <omgdi:waypoint x="480.0" y="1047.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="490.0" y="1019.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
      <bpmndi:BPMNEdge bpmnElement="flow28" id="BPMNEdge_flow28">
        <omgdi:waypoint x="567.0" y="940.0"></omgdi:waypoint>
        <omgdi:waypoint x="567.0" y="1047.0"></omgdi:waypoint>
        <omgdi:waypoint x="655.0" y="1047.0"></omgdi:waypoint>
        <bpmndi:BPMNLabel>
          <omgdc:Bounds height="14.0" width="48.0" x="584.0" y="1019.0"></omgdc:Bounds>
        </bpmndi:BPMNLabel>
      </bpmndi:BPMNEdge>
    </bpmndi:BPMNPlane>
  </bpmndi:BPMNDiagram>
</definitions>